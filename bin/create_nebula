# TODO have a 'create' and 'use' version. the 'use' should pull from bit(vault)warden
# TODO mount ram to working folder, unmount when using bitwarden
# TODO make ram mount optional 

# TODO remove
alias bw="echo nnnnnnnnnnnnnnnnnnn $@"

export ref_dir="$HOME/.drew_nebula"
source "$ref_dir/env"

if [ "$name" == "" ]
then
	echo "set \$name as env variable"
	exit
fi

if [ "$ip_address" == "" ]
then
	ip_address="1.2.3.4/24"
	echo "set \$ip_address as env variable in the form $ip_address"
	exit
fi

if [ "$org_name" == "" ]
then
	echo "org_name for bitwarden is missing. Set it in $ref_dir/env"
	exit
fi

# wont change often
# ca_crt_location="$ref_dir/ca.crt"
# ca_key_location="$ref_dir/ca.key"
# nebula_cert_location="$ref_dir/nebula-cert" # the nebula-cert program

# prob won't change 
# work_dir="/tmp/nebula_cert_creation"

echo $work_dir

# make sure we have a clear dir
rm -rf "$work_dir"
mkdir -p "$work_dir"

# mount in ram so the secrets are short lived; save pid
rclone mount :memory: $work_dir & sleep 5 && export rclone_memory_mount=$!
echo $rclone_memory_mount

cd $work_dir 

# don't need cuz delete whole dir
# rm -rf "$name.crt"
# rm -rf "$name.key"

cp $ca_crt_location .
cp $ca_key_location .

# TODO make this have tags (or whatever they're calle)
$nebula_cert_location sign -name $name -ip "$ip_address"

rm "./ca.crt"
# rm "./ca.key"

echo 'need to make custom config file that is sent with cert info'
echo "$work_dir"
ls -tl $work_dir

# start of uploading to bitwarden
# 
# 
# 
# 
export BW_SESSION="$(cat $bashrc_folder/gitignore/BW_SESSION)"

echo "starting sync"
bw sync
echo "sync done"

org_id="$(bw list organizations --search $org_name | jq .[0].id -r)" # assumes the first hit is what is desired 

# TODO create org if it doesn't exsist

# col_name="Default Collection"

# org where the cert for the client should be located
# assumes the first hit is what is desired 
col_id="$(bw list collections --search $col_name | jq .[0].id -r)" 

# org that has ca information 
# assumes the first hit is what is desired 
ca_col_id=$(bw list collections --search "$ca_col_name" | jq .[0].id -r) 

# TODO create collection if it doesn't exsist

# bw login

# TODO check if org exsists, if not, make it 

addEntry (){
        #cat $f
        file_contents="$(cat $f)"
	
	echo "creating $note_name with org id of $org_id"

	echo "searching for $note_name within $org_name" 

	search_json=$(bw list items --organizationid "$org_id" --search "$note_name" | jq .[-1])
	source_json=""

	echo 2

	if [[ "$search_json" != "null" ]]
	then

		item_id="$(echo $search_json | jq -r .id)"

        	echo "found note $note_name"
		source_json=$search_json
		
        	new_item=$(echo "$source_json" | jq ".type = 2 | .secureNote.type = 0 | .notes = \"$file_contents\" | .name = \"$note_name\" | .organizationId = \"$org_id\" | .collectionIds[0] = \"$col_id\" | .revisionDate = null" )

        	new_item=$(echo "$new_item" | bw encode)

		bw edit item "$item_id" "$new_item" > /dev/null # don't print cert
		# exit
	else
		echo "need to make note with name $note_name"
		source_json="$(bw get template item)"
		
        	new_item=$(echo "$source_json" | jq ".type = 2 | .secureNote.type = 0 | .notes = \"$file_contents\" | .name = \"$note_name\" | .organizationId = \"$org_id\" | .collectionIds[0] = \"$col_id\"" )

        	new_item=$(echo "$new_item" | bw encode)

		printf "$new_item" | bw create item > /dev/null # don't print cert 
        fi

	
	
	# bw get template item | jq ".type = 2 | .secureNote.type = 0 | .notes = \"$file_contents\" | .name = \"$note_name\" | .organizationId = \"$org_id\"" 
        # bw list items --search "$note_name" | jq .[0]
}

note_name="$name nebula crt" f="./$name.crt" addEntry &&  
note_name="$name nebula key" f="./$name.key" addEntry 

# 
# 
# 
# 
# end of uploading to bitwarden

# kill $rclone_memory_mount && echo "memory location unmounted" || echo "memory location not unmounted"
kill $rclone_memory_mount && echo "memory location unmounted" || echo "memory location not unmounted"

