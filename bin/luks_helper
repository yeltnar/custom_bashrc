# setup (encrypted) disk image
# http://freesoftwaremagazine.com/articles/create_encrypted_disk_image_gnulinux/

_checkVars(){

  if [ -z "$work_dir" ] ; then
      echo "work_dir env var not defined; exiting";
      exit -1;
  fi
  if [ -z "$mount_location" ] ; then
      echo "mount_location env var not defined; exiting";
      exit -1;
  fi
  if [ -z "$dev_luks" ] ; then
      echo "dev_luks env var not defined; exiting";
      exit -1;
  fi
  if [ -z "$dev_location" ] ; then
      echo "dev_location env var not defined; exiting";
      exit -1;
  fi
  if [ -z "$img_path" ] ; then
      echo "img_path env var not defined; exiting";
      exit -1;
  fi

}

listFunctions(){
  declare -F | awk '{print $NF}'
	exit
}

init_img(){
    _checkVars


    echo "working in $work_dir"
    mkdir -p "$work_dir"
    cd "$work_dir"

    echo $img_path

    # check file does not exsist 
    if [ -e "$img_path" ]; then
        echo "image path already exsists: $img_path; exiting" >&2
        exit -1;
    fi

    # create file
    truncate -s 1G "$img_path"

    # add luks to the file
    sudo cryptsetup -y luksFormat "$img_path" 

    # decrypt luks
    sudo cryptsetup luksOpen "$img_path" "$dev_luks"

    # create fs on luks disk
    sudo mkfs.ext4 "$dev_location" 

    # close luks mount
    sudo cryptsetup close $dev_location
}

mount(){

    echo "working in $work_dir"
    mkdir -p "$work_dir"
    cd "$work_dir"

    _checkVars
    sudo cryptsetup luksOpen "$img_path" "$dev_luks"
    # mount decrypted luks
    mkdir -p "$mount_location"
    sudo mount -o loop $dev_location "$mount_location"
    sudo chown $(id -u):$(id -g) "$mount_location"
}

unmount(){

    echo "working in $work_dir"
    mkdir -p "$work_dir"
    cd "$work_dir"

    _checkVars
    # unmount
    sudo umount "$mount_location"
    sudo cryptsetup close $dev_location
}

test_helper(){
  export work_dir="/tmp/luks-testing"
  export mount_location="/tmp/luks-testing/mount"
  export dev_luks="disk_img_decrypted"
  export dev_location="/dev/mapper/$dev_luks"
  export img_path="disk.img"

  init_img; 
  mount; 
  date > "$mount_location/t.txt";
  echo "***";
  cat "$mount_location/t.txt";
  echo "***";
  unmount;
}

if [ -z "$1" ] ; then
        echo "no function provided. Try:"
        listFunctions
        exit
fi

if [[ "$(echo `declare -F | awk '{print $NF}'`)" == *"$1"* ]] ; then
  $1
else
        echo "function not found. Try:"
        listFunctions
fi
