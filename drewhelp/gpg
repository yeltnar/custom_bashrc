# use -q to be more quiet, or -v for verbose  

gpg  --list-keys

# create output file to send
echo "hi" |gpg --output out.gpg --encrypt --recipient gpg@andbrant.com 

# decrypt output file
cat out.gpg | gpg --decrypt

# pipe encrypt and decrypt
echo "hi" | gpg --encrypt --recipient gpg@andbrant.com | gpg --decrypt 

# pipe encrypt and decrypt with provided password (raw text possible too)
echo "hi" | gpg --encrypt --recipient gpg@andbrant.com --symmetric --batch --no-tty --passphrase-file ./pass | gpg --batch --passphrase-file ./pass --decrypt --no-tty 

# generate key
gpg --gen-key
gpg --full-generate-key

# export key 
gpg --armor --export [id]

# import 
gpg --import blake.gpg

# import/export with ssh
ssh $REMOTE gpg --armor --export $KEY_ID | gpg --import 

# sign with specific key 
gpg -u $KEY_ID ...
gpg --local-user $KEY_ID ...

# delete key
gpg --delete-key drew

# delete private key
gpg --delete-secret-key drew

# generate without passphrase # note batch 
gpg --batch --passphrase '' --quick-gen-key default default

# sign git commit with specific key
# notice no space between -S and id
git commit -S1E5DC28C510B0A48 -m a

# don't print extra info
gpg -q ... 

### trust ### 

gpg --edit-key
# ...type 'trust'
# ...give it a level, 1-5, or m for main menu

