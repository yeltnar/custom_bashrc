# NOTE: THIS SHOULD BE USED WITH A LATER VERSION OF JQ... IF FAILS MAYBE THATS WHY

jq '.data.".dockerconfigjson"'
echo {} | jq --arg PWD "$PWD" '.workdir = $PWD'

# returns object which matches the boolean
jq 'select(.request.uri == "/nebula/digitalocean.date")'

# returns array with keys that match the filter
jq 'map(select(.request.uri == "/nebula/digitalocean.date"))'

# test array's `name` key for `pixel` as a regex
jq 'map(select(.name|test("pixel")))'

homeassistant_all_devices | jq 'map(select(.entity_id | test("lumi_lumi_weather_battery"))) .[].state'

# filter for elements in an array which have `lumi...` inside of entity_id. 
# then, for each match, print the state and friendly_name
homeassistant_all_devices | jq -r 'map(select(.entity_id | test("lumi_lumi_weather_battery"))) .[] | "\(.state) \"\(.attributes.friendly_name)\""'

# this will filter the json array for a k that matches the test of "value", and print the 'b' key when it matches
echo '[{"b":{"k":"val"}},{"b":{"k":"value"}},{"b":{"k":"value"}}]' | \
jq 'map(select(.b.k | test("value"))) .[] | .b'
