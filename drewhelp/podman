# make sure to use `:Z` after -v flag so it can be read in the container (lower case z means used by all containers)

# use podman instead of docker socket 
export DOCKER_HOST='unix:///Users/drew/.local/share/containers/podman/machine/qemu/podman.sock'

# generate k8s yaml from running pod
podman generate kube {container}

#
podman play kube {yaml}

# podman-unshare - Run a command inside of a modified user namespace
podman unshare chown 27:27 /path/to/dir

# look at selinux for more

# selinux notes
podman run -v $PWD/folder:/folder:Z # for making permissions good in the container 
add se linux permissions for the running selinux
httpd needs to be set up to allow access to files like the default files are
make sure fs user is good 

# generate systemd to restart pod with reboot 
podman generate systemd \
--new --name toms-mongo \
> /etc/systemd/system/toms-mongo.service

# copy images from one user to another
sudo podman save myimage | sudo -u myuser podman load` # copy
sudo podman rmi myimage # if a "move" is desired

# ignore self signed registry 
--tls-verify=false

# save image as tar
podman save -o /tmp/image.tar

# load tar as image
podman load -i /tmp/image.tar

# run x86 image 
https://developer.ibm.com/tutorials/running-x86-64-containers-mac-silicon-m1/

# change default VM 
podman system connection default intel

# add mac dirs to VM
podman machine init -v $HOME:$HOME -v /tmp:/tmp_host

# you can reset the entire storage with 
podman system reset

# gpu graphics card setup
podman run --rm --gpus=all nvidia/cuda:11.0.3-base-ubuntu20.04 nvidia-smi
# podman-compose does not seem to be taking '--gpus' into consideration, this forces it 
podman-compose --podman-run-args="--gpus=all" up;

# create systemd file from podman-compose 
podman-compose systemd --action create-unit 

# info about creating volume the fuse.s3fs helps to understand other drivers
# https://docs.podman.io/en/latest/markdown/podman-volume-create.1.html


# set custom remote helpers 
# https://developer.ibm.com/tutorials/running-x86-64-containers-mac-silicon-m1/
# https://lima-vm.io/docs/examples/#running-containers
limactl list podman --format yaml | yq -r .instance.config.message
podman system connection add --identity ~/.lima/_config/user --port 64996 lima drew@localhost
podman system connection default lima 
podman system connection default podman-machine-default
limactl list  --json | jq 

# use different podman connection... can also use --connection or -c
export CONTAINER_CONNECTION=my-remote-host
